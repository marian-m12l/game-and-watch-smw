/*
******************************************************************************
**

**  File        : LinkerScript.ld
**
**  Author		: Auto-generated by System Workbench for STM32
**
**  Abstract    : Linker script for STM32H7B0VBTx series
**                128Kbytes FLASH and 1216Kbytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used.
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed “as is,” without any warranty
**                of any kind.
**
*****************************************************************************
** @attention
**
** <h2><center>&copy; COPYRIGHT(c) 2019 STMicroelectronics</center></h2>
**
** Redistribution and use in source and binary forms, with or without modification,
** are permitted provided that the following conditions are met:
**   1. Redistributions of source code must retain the above copyright notice,
**      this list of conditions and the following disclaimer.
**   2. Redistributions in binary form must reproduce the above copyright notice,
**      this list of conditions and the following disclaimer in the documentation
**      and/or other materials provided with the distribution.
**   3. Neither the name of STMicroelectronics nor the names of its contributors
**      may be used to endorse or promote products derived from this software
**      without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
** OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*****************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x20020000;    /* end of RAM */
/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0;      /* required amount of heap  */
_Min_Stack_Size = 0x400; /* required amount of stack */



/* Useful for scripts */
__NULLPTR_LENGTH__  = 0x100;
__ITCMRAM_LENGTH__  = 64K;
__DTCMRAM_LENGTH__  = 128K;
__RAM_LENGTH__   = 1024K;
__RAM_UC_LENGTH__   = 0K;   /* FIXME 300K */
__RAM_CORE_LENGTH__  = __RAM_LENGTH__ - __RAM_UC_LENGTH__;
__AHBRAM_LENGTH__   = 128K;
__FLASH_LENGTH__    = 256K; /* Both banks are 256KB */



__INTFLASH__ = DEFINED(__INTFLASH__) ? __INTFLASH__ : 0x08000000;


__EXTFLASH_TOTAL_LENGTH__ = DEFINED(__EXTFLASH_TOTAL_LENGTH__) ? __EXTFLASH_TOTAL_LENGTH__ : 1024K;
__EXTFLASH_OFFSET__ = DEFINED(__EXTFLASH_OFFSET__) ? __EXTFLASH_OFFSET__ : 0;
__EXTFLASH_BASE__ = 0x90000000;  /* Beginning of addressable extflash addresses */
__EXTFLASH_START__ = __EXTFLASH_BASE__ + __EXTFLASH_OFFSET__;  /* Beginning of where we're going to store emulator and rom data */


__SAVEFLASH_LENGTH__ = 4096 + (ENABLE_SAVESTATE ? (4096 * 66) : 0);
__CONFIGFLASH_LENGTH__ = 4096;
__FBFLASH_LENGTH__ = ENABLE_SCREENSHOT ? ((320 * 240 * 2 + 4095) / 4096) * 4096 : 0;

__EXTFLASH_LENGTH__ = __EXTFLASH_TOTAL_LENGTH__ - (__SAVEFLASH_LENGTH__ + __CONFIGFLASH_LENGTH__ + __FBFLASH_LENGTH__);
__EXTFLASH_END__ = __EXTFLASH_START__ + __EXTFLASH_LENGTH__;
__SAVEFLASH_START__ = __EXTFLASH_END__;
__SAVEFLASH_END__   = __SAVEFLASH_START__ + __SAVEFLASH_LENGTH__;
__CONFIGFLASH_START__ = __SAVEFLASH_END__;
__CONFIGFLASH_END__   = __CONFIGFLASH_START__ + __CONFIGFLASH_LENGTH__;
__FBFLASH_START__ = __CONFIGFLASH_END__;
__FBFLASH_END__   = __FBFLASH_START__ + __FBFLASH_LENGTH__;



__RAM_START__       = 0x24000000;
__RAM_UC_START__    = __RAM_START__;
__RAM_CORE_START__  = __RAM_START__ + __RAM_UC_LENGTH__;
__RAM_END__     = __RAM_CORE_START__ + __RAM_CORE_LENGTH__;



/* TODO RAM application loaded in RAM_UC (300K) */
/* TODO intflash bootloader loads RAM application */


/* Specify the memory areas */
MEMORY
{
  ITCMRAM  (xrw) : ORIGIN = 0x00000000, LENGTH = 64K
  DTCMRAM  (xrw) : ORIGIN = 0x20000000, LENGTH = 128K
  RAM_UC   (xrw) : ORIGIN = __RAM_UC_START__, LENGTH = __RAM_UC_LENGTH__
  RAM_CORE (xrw) : ORIGIN = __RAM_CORE_START__, LENGTH = __RAM_CORE_LENGTH__
  AHBRAM   (xrw) : ORIGIN = 0x30000000, LENGTH = 128K

  /* + 32KB of AHB RAM IN SRD DOMAIN @ 0x38000000 ? */
  /* + 4KB of Backup RAM @ 0x38800000 ? */

  FLASH    (xr ) : ORIGIN = __INTFLASH__,  LENGTH = __FLASH_LENGTH__
  EXTFLASH (xr ) : ORIGIN = __EXTFLASH_START__,  LENGTH = __EXTFLASH_LENGTH__
  SAVEFLASH(xr ) : ORIGIN = __SAVEFLASH_START__, LENGTH = __SAVEFLASH_LENGTH__
  CONFIGFLASH(xr ) : ORIGIN = __CONFIGFLASH_START__, LENGTH = __CONFIGFLASH_LENGTH__
  FBFLASH(xr ) : ORIGIN = __FBFLASH_START__, LENGTH = __FBFLASH_LENGTH__
}

/* Define output sections */
SECTIONS
{

  /* TODO List of RAM payload sections */
  /* TODO List of intflash sections */
  /* TODO List of extflash sections */

  /* TODO Size of intflash sections */
  /* TODO Size of extflash sections */



  /*********************************************/
  /****************** EXTFLASH *****************/
  /*********************************************/


  /* TODO move to end of script ??? */
  __extflash_start__ = LOADADDR(._itcram_hot);


  /***** Loaded from EXTFLASH into ITCMRAM *****/

  _sitcram_hot = LOADADDR(._itcram_hot);
  ._itcram_hot :
  {
    __itcram_start__ = .;

    . = ALIGN(4);
    __itcram_hot_start__ = .;
    
    build/dma.o (.text .text*)
    build/dsp.o (.text .text*)
    build/ppu.o (.text .text*)
    build/smw_rtl.o (.text .text*)
    build/smw_05.o (.text .text*)
    build/smw_0c.o (.text .text*)

    . = ALIGN(4);
    __itcram_hot_end__ = .;

    __itcram_end__ = .;
  } >ITCMRAM AT> EXTFLASH


  /***** Loaded from EXTFLASH into DTCMRAM *****/
  
  _sdtcram_hot = LOADADDR(._dtcram_hot);
  ._dtcram_hot :
  {
    __dtcram_start__ = .;
    
    . = ALIGN(4);
    __dtcram_hot_start__ = .;
    
    build/dma.o (.rodata .rodata*)
    build/dsp.o (.rodata .rodata*)
    build/ppu.o (.rodata .rodata*)
    build/smw_rtl.o (.rodata .rodata*)
    build/smw_05.o (.rodata .rodata*)
    build/smw_0c.o (.rodata .rodata*)

    . = ALIGN(4);
    __dtcram_hot_end__ = .;

  } >DTCMRAM AT> EXTFLASH


  /****** Loaded from EXTFLASH into AHBRAM *****/
  
  _sahbram_hot = LOADADDR(._ahbram_hot);
  ._ahbram_hot :
  {
    __ahbram_start__ = .;

    . = ALIGN(4);
    __ahbram_hot_start__ = .;

    build/smw_spc_player.o (.text .text* .rodata .rodata*)
    build/smw_00.o (.text .text* .rodata .rodata*)
    build/smw_03.o (.text .text* .rodata .rodata*)
    build/smw_07.o (.text .text* .rodata .rodata*)
    
    . = ALIGN(4);
    __ahbram_hot_end__ = .;
    
    __ahbram_end__ = .;
  } >AHBRAM AT> EXTFLASH


  /******* Loaded from EXTFLASH into RAM *******/

  _siramdata = LOADADDR(._ram_exec);
  ._ram_exec :
  {
    __ram_start__ = .;

    . = ALIGN(4);
    __ram_exec_start__ = .;

    build/smw_01.o (.text .text* .rodata .rodata*)
    build/smw_02.o (.text .text* .rodata .rodata*)
    build/smw_04.o (.text .text* .rodata .rodata*)
    build/smw_0d.o (.text .text* .rodata .rodata*)
    
    build/smw_assets_in_ram.o (.text .text* .rodata .rodata*)

    . = ALIGN(4);
    __ram_exec_end__ = .;
    
  } >RAM_CORE AT> EXTFLASH


  /************* Stored in EXTFLASH ************/

  ._extflash :
  {
    . = ALIGN(4);
    _extflash = .;

    build/smw_assets_in_extflash.o (.text .text* .rodata .rodata*)

    __extflash_end__ = .;
  } >EXTFLASH

  /* FIXME extflash sections ??? */
  /* FIXME move to end of script ??? */
  __extflash_end__ = __extflash_start__ + SIZEOF(._itcram_hot) + SIZEOF(._dtcram_hot) + SIZEOF(._ahbram_hot) + SIZEOF(._ram_exec) + SIZEOF(._extflash);


  /* TODO Should be counted in extflash size ??? */

  ._saveflash (NOLOAD) :
  {
    __saveflash_start__ = .;
    *(.saveflash)
    __saveflash_end__ = .;
  } > SAVEFLASH

  ._configflash (NOLOAD):
  {
    . = ALIGN(4K);
    __configflash_start__ = .;
    *(.configflash)
    __configflash_end__ = .;
  } > CONFIGFLASH

  ._fbflash (NOLOAD):
  {
    . = ALIGN(4K);
    __fbflash_start__ = .;
    *(.fbflash)
    __fbflash_end__ = .;
  } > FBFLASH


  /*********************************************/
  /********************* RAM *******************/
  /*********************************************/


  /********* Reserved area in DTCMRAM **********/

  ._persistent (NOLOAD) :
  {
    . = ALIGN(8);
    *(.persistent)
    . = ALIGN(8);
  } >DTCMRAM


  /***** Uninitialized variables in DTCMRAM ****/

  . = ALIGN(4);
  ._spc_player_bss :
  {
    . = ALIGN(4);
    __dtcram_bss_start__ = .;

    build/smw_spc_player.o (.bss .bss*)
    *(.savestate_buffer)
    
    . = ALIGN(4);
    __dtcram_bss_end__ = .;

  } >DTCMRAM


  /******* Uninitialized variables in RAM ******/
  
  . = ALIGN(4);
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM_CORE


  /* User_heap_stack section, used to check that there is enough RAM left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
    __ram_end__ = .;
  } >RAM_CORE



  /*********************************************/
  /****************** INTFLASH *****************/
  /*********************************************/

  /* FIXME only bootloader ??? + associated isr_vector */
  
  /* TODO move to end of script ??? */
  __flash_start__ = LOADADDR(.isr_vector);


  /***** ISR vector comes first in INTFLASH ****/
  
  .isr_vector :
  {

    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
    
  } >FLASH


  /* Rest of program code is stored in INTFLASH */

  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH


  /**** Constant data is stored in INTFLASH ****/
  
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(4);
  } >FLASH


  /* Needed for exception handling / frame stacks */

  .ARM.extab :
  {
    *(.ARM.extab* .gnu.linkonce.armextab.*)
  } >FLASH
  
  .ARM : {
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >FLASH


  /* Functions arrays for (pre-)initialization and termination */

  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH


  /***** Loaded from INTFLASH into DTCMRAM *****/

  _sidata = LOADADDR(.data);
  .data : 
  {

    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
    
    __dtcram_end__ = .;
  } >DTCMRAM AT> FLASH


  /* FIXME intflash sections ??? */
  /* FIXME move to end of script ??? */
  __flash_end__ = __flash_start__ + SIZEOF(.isr_vector) + SIZEOF(.text) + SIZEOF(.rodata) + SIZEOF(.ARM.extab) + SIZEOF(.ARM) + SIZEOF(.preinit_array) + SIZEOF(.init_array) + SIZEOF(.fini_array) + SIZEOF(.data);
  

  /* Remove information from the standard libraries */
  
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}


